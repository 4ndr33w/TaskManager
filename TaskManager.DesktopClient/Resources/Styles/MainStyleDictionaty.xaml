<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    x:Name="MainResourceDictionary">
    <LinearGradientBrush x:Key="WindowBackground" 
                         x:Name="WindowBackground"
                      EndPoint="0.5,0" 
                      StartPoint="0.5,1">
        <GradientStop Color="#FF1D1D1D"/>
        <GradientStop Color="#FF424242" Offset="2"/>
    </LinearGradientBrush>
    <FontStyle x:Key="WindowTextStyleForeground">Normal</FontStyle>

    <Style TargetType="TextBox" 
        x:Key="CommonTextBoxStyle">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="CaretBrush" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontStyle" Value="{StaticResource WindowTextStyleForeground}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="Height" Value="30"></Setter>
    </Style>

    <Style TargetType="TextBox" x:Key="MultiLineTextBox" BasedOn="{StaticResource CommonTextBoxStyle}">
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="MinHeight" Value="60"/>
    </Style>

    <Style TargetType="TextBlock" 
     x:Key="CommonTextBlockStyle">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontStyle" Value="{StaticResource WindowTextStyleForeground}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style TargetType="Label" 
 x:Key="CommonLabelStyle">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontStyle" Value="{StaticResource WindowTextStyleForeground}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Height" Value="30"></Setter>
    </Style>

    <Style TargetType="PasswordBox" 
  x:Key="CommonPaswordBoxStyle">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="CaretBrush" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontStyle" Value="{StaticResource WindowTextStyleForeground}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="Height" Value="30"></Setter>
    </Style>



    <SolidColorBrush x:Key="Button.Static.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="Button.Static.Foreground" Color="White"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="White"/>
    
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="White"/>
    <SolidColorBrush x:Key="Button.MouseOver.Foreground" Color="White"/>
    
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="DimGray"/>
    <SolidColorBrush x:Key="Button.Pressed.Foreground" Color="White"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="Gray"/>
    
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="DimGray"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="Gray"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="Black"/>

    <Style x:Key="CommonButtonStyle"
           TargetType="Button">
        
        
        
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Disabled.Foreground}"/>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>

    <Style x:Key="CommonMenuStyle"
           TargetType="Menu">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="White"/>
    </Style>

    <Style x:Key="CommonMenuItemStyle"
           TargetType="MenuItem">
        <Setter Property="Background" Value="{Binding ElementName=WindowBackground}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="Width" Value="50"></Setter>
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
        <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"></Setter>
    </Style>

    <Style x:Key="CommonGridSplitterStyle" TargetType="GridSplitter">
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="MinWidth" Value="200"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style x:Key="CommonBorderStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="White"/>
        <!--<Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="MinWidth" Value="200"/>-->
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="TextBlock"
           x:Key="TextBlockHeader"
           BasedOn="{StaticResource CommonTextBlockStyle}">
        <Setter Property="FontSize" Value="20"/>
    </Style>

    <Style TargetType="Frame"
           x:Key="FrameStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style TargetType="Grid"
         x:Key="GridStyle">
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="GridViewColumnHeader"
      x:Key="GridViewColumnHeaderStyle">
        <Setter Property="Background" Value="Black"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style TargetType="ListView"
        x:Key="ListViewStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style TargetType="Border" x:Key="ProjectPanelBorder">
        <Setter Property="Background" Value="Black"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="BorderThickness" Value="0.6"/>
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="MinWidth" Value="250"/>
    </Style>

    <Style TargetType="ComboBox" x:Key="ComboBoxCommonStyle">
        <Setter Property="Foreground" Value="Red"/>
        <!-- Цвет текста -->
        <Setter Property="Background" Value="Black"/>
        <!-- Цвет фона -->
        <Setter Property="BorderBrush" Value="White"/>
        <!-- Цвет рамки -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton x:Name="toggleButton"
                                          Grid.Column="2"
                                          Focusable="false"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press"/>
                        <ContentPresenter x:Name="contentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Popup x:Name="popup"
                                   Placement="Bottom"
                                   IsOpen="{TemplateBinding IsDropDownOpen}"
                                   AllowsTransparency="True"
                                   Focusable="False"
                                   PopupAnimation="Slide">
                            <Grid x:Name="dropDown"
                                      SnapsToDevicePixels="True"
                                      MinWidth="{TemplateBinding ActualWidth}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="dropDownBorder"
                                            BorderThickness="1"
                                            Background="Black"
                                            BorderBrush="White"/>
                                <ScrollViewer Margin="4,6,4,6"
                                                  SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="dropDown" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Red"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="dropDownBorder" Property="CornerRadius" Value="4"/>
                            <Setter TargetName="dropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"
                                     Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>







    <ControlTemplate x:Key="ComboBoxToggleButton"
              TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>

            <ToggleButton x:Name="toggleButton"
                                          Grid.Column="2"
                                          Focusable="false"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press"/>
            <ContentPresenter x:Name="contentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

            <Popup x:Name="popup"
                                   Placement="Bottom"
                                   AllowsTransparency="True"
                                   Focusable="False"
                                   PopupAnimation="Slide">
                <Grid x:Name="dropDown"
                                      SnapsToDevicePixels="True"
                                      MinWidth="70"
                                      MaxHeight="30">
                    <Border x:Name="dropDownBorder"
                                            BorderThickness="1"/>
                    <ScrollViewer Margin="4,6,4,6"
                                                  SnapsToDevicePixels="True">
                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                    </ScrollViewer>
                </Grid>
            </Popup>

            <Border x:Name="Border"
         Grid.ColumnSpan="2"
         CornerRadius="2"
         BorderThickness="1">
                <Border.BorderBrush>
                    <SolidColorBrush Color="White"></SolidColorBrush>

                </Border.BorderBrush>
                <Border.Background>

                    <LinearGradientBrush StartPoint="0,0"
                          EndPoint="0,1">
                        <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="DarkGray" />
                                <GradientStop Color="Black"
                         Offset="1.0" />
                            </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>

                </Border.Background>
            </Border>
            <Border Grid.Column="0"
         CornerRadius="2,0,0,2"
         Margin="1" >
                <Border.Background>
                    <SolidColorBrush Color="Transparent"/>
                </Border.Background>
            </Border>
            <!--<Path x:Name="Arrow"
       Grid.Column="1"
       HorizontalAlignment="Center"
       VerticalAlignment="Center">
            </Path>-->
        </Grid>
    </ControlTemplate>
    <!--//background textbox-->
    <ControlTemplate x:Key="ComboBoxTextBox"
              TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost"
       Focusable="False"
                 Background="Transparent"  
       BorderThickness="5"/>
    </ControlTemplate>















    <Style TargetType="{x:Type CheckBox}" x:Key="ToggleStyleCheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <SolidColorBrush x:Key="fillBrush">LightBlue</SolidColorBrush>
                        <SolidColorBrush x:Key="borderBrush">Gray</SolidColorBrush>
                    </ControlTemplate.Resources>
                    <Grid  Background="Transparent" SnapsToDevicePixels="True"
                           Height="18"  
                           >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="34" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid  x:Name="markGrid" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle Fill="Transparent" Height="30" x:Name="moveEllipse">
                                <Rectangle.Style>
                                    <Style TargetType="Rectangle">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation From="0" To="16" Duration="0:0:0.4" 
                                              Storyboard.TargetProperty="Width" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation To="0" Duration="0:0:0.4" 
                                                         Storyboard.TargetProperty="Width"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                            <Rectangle RadiusX="5" RadiusY="5" 
                                       Grid.ColumnSpan="2"
                                       Name="line"
                                       StrokeThickness="1"
                                       IsHitTestVisible="False"
                                       Margin="1,4,1,4"
                                 >
                                <Rectangle.Style>
                                    <Style TargetType="{x:Type Rectangle}">
                                        <Setter Property="Fill" Value="DimGray"/>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                            <Ellipse Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
                                     StrokeThickness="1"
                                     Name="spot"
                                     Grid.Column="1"
                                     HorizontalAlignment="Left"
                                     >
                                <Ellipse.Style>
                                    <Style TargetType="Ellipse">
                                        <Setter Property="Fill" Value="Black"/>
                                        <Setter Property="Stroke" Value="White"/>
                                    </Style>
                                </Ellipse.Style>
                            </Ellipse>

                        </Grid>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="line" Value="DarkGray"/>
                            <Setter Property="Stroke" TargetName="spot" Value="DarkGray"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"  Value=".5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Stroke" TargetName="line" Value="Black"/>
                            <Setter Property="Stroke" TargetName="spot" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="line" Value="DimGray"/>
                            <Setter Property="Fill" TargetName="spot" Value="DimGray"/>
                            <Setter Property="Stroke" TargetName="spot" Value="DarkGray"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Fill" TargetName="line" Value="DimGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>
